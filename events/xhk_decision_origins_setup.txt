namespace = xhk_decision_origins

## PROSPEROUS UNIFICATION
country_event = {
	id = xhk_decision_origins.1
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = decision_origins_prosperous_unification
		## add deposit and pops
		capital_scope = {
			# this is for compatibility with any form of district set, simply gives 2 extra district slots
			add_deposit = xhk_d_prosp_unif

			create_pop_group = {
				size = 400
				species = owner_main_species
			}		
		}
		
		## add buff
		if = {
			limit = {
				is_gestalt = no
			}
			capital_scope = {
				add_modifier = { modifier = prosp_uni_mod days = 7200 }
			}
		}
		else = {
			capital_scope = {
				add_modifier = { modifier = prosp_uni_mod_gestalt days = 7200 }
			}
		}
	}
}

## TREE OF LIFE
country_event = {
	id = xhk_decision_origins.2
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = decision_origins_tree_of_life
		add_modifier = { modifier = xhk_decori_tree_life_modifier }
		## add deposit and pops
		capital_scope = {
			add_deposit = d_tree_of_life_home
		}
	}
}


## RESOURCE CONSOLIDATION
country_event = {
	id = xhk_decision_origins.4
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = decision_origins_resource_consolidation
		## add deposit
		capital_scope = {
			
			change_pc = pc_machine
			add_deposit = d_machine_minerals

			if = {
				limit = {
					owner = { has_valid_civic = civic_machine_assimilator }
				}
				add_deposit = d_organic_slurry
				every_owned_species = {
					limit = {
						is_robotic = no
					}
					set_habitability_trait = { trait = trait_pc_machine_preference }
				}
			}
			
			add_zone = {
				district = district_nexus_1
				zone = zone_energy_nexus
				replace = yes
			}
	
			add_zone = {
				district = district_nexus_2
				zone = zone_minerals_nexus
				replace = yes
			}

			solar_system = {
				every_system_planet = {
					limit = {
						colonizable_planet = no
						is_star = no
					}
					clear_deposits = yes
				}
				every_system_planet = {
					limit = {
						is_asteroid = yes
					}
					remove_planet = yes
				}
				every_system_planet = {
					limit = {
						colonizable_planet = no
						is_star = no
						is_asteroid = no
						NOT = { is_planet_class = pc_gas_giant }
					}
					change_pc = pc_broken
				}
				every_system_planet = {
					limit = {
						colonizable_planet = no
						is_star = no
						is_planet_class = pc_gas_giant
					}
					change_pc = pc_molten
					add_modifier = { modifier = chthonian_planet }
					every_moon = {
						limit = {
							colonizable_planet = no
						}
						remove_planet = yes
					}
					while = {
						limit = {
							planet_size >= 20
						}
						change_planet_size = -6
					}
				}
			}
			
		}
		
	}
}


## SUBTERREANEAN
country_event = {
	id = xhk_decision_origins.7
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		set_country_flag = decision_origins_subterranean
		add_modifier = { modifier = xhk_decori_subterranean_modifier }
		every_owned_species = {
			limit = {
				is_robotic = no
			}
			change_species_characteristics = {
				add_trait = trait_cave_dweller
			}
		}

		every_owned_species = {
			limit = {
				is_robotic = yes
			}
			change_species_characteristics = {
				add_trait = trait_robot_cave_dweller
			}
		}
	}
}

## OVERTUNED
country_event = {
	id = xhk_decision_origins.8
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		set_country_flag = decision_origins_overtuned
		give_technology = { message = no tech = tech_gene_tailoring }

	}
}

## TOXIC KNIGHTS
country_event = {
	id = xhk_decision_origins.9
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		# flag is different to match existing stuff
		set_country_flag = decision_toxic_knights

		# capital stuff
		capital_scope = {
			
			add_deposit = d_toxic_god_blight_upon_the_land
			add_deposit = d_toxic_god_deitys_swarms
			add_deposit = d_toxic_god_pools_most_venemous
			add_deposit = d_toxic_god_pestilential_wasteland
			add_deposit = d_toxic_god_envenomed_seas
			add_deposit = d_knights_calibrator
			set_planet_flag = toxic_knights_habitat
			
			if = {
				## change the first zone, should be archives to the special zone
				limit = {
					NOT = { is_planet_class = pc_ring_world }
				}
				change_planet_size = 5
				add_zone = {
					district = district_city
					zone = xhk_zone_capital_knights
					zone_slot = 1
					replace = yes
				} 
			} 
			else = {
				add_zone = {
					district = district_rw_city
					zone = xhk_zone_capital_knights
					zone_slot = 1
					replace = yes
				} 
			}
			
			add_building = {
				zone = xhk_zone_capital_knights
				building = building_order_keep
			}
			
		}

		# mimics toxoids.7000
		start_situation = {
			type = situation_toxic_knights
		}

	}
}

## MECHANIST
country_event = {
	id = xhk_decision_origins.10
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		set_country_flag = decision_origins_mechanist

		capital_scope = {
			add_building = {
				zone = slot_city_government
				building = building_robot_assembly_plant
			}
		}

		give_technology = {
			tech = tech_powered_exoskeletons
		}
		give_technology = {
			tech = tech_robotic_workers
		}
		add_tech_progress = {
			tech = tech_robomodding
			progress = 0
		}
		add_modifier = {
			modifier = xhk_decori_mechanists_modifier
		}
	}
}

## GALACTIC DOORSTEP
country_event = {
	id = xhk_decision_origins.11
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		set_country_flag = decision_origins_galactic_doorstep

		# this mimics origin.1001
		capital_scope = {
			solar_system = {
				spawn_megastructure = {
					name = "NAME_Galactic_Doorstep"
					type = "gateway_ruined"
					random_pos = yes
					orbit_angle = 360
					init_effect = {
						set_megastructure_flag = doorstep_gateway@root
						save_event_target_as = doorstep_gateway
					}
				}
				set_star_flag = abandoned_gateway
			}
		}
		set_country_flag = encountered_first_gateway
		country_event = { id = origin.1000 days = 300 random = 30 }
	}
}

## SYNCRETIC EVOLUTION
country_event = {
	id = xhk_decision_origins.12
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		set_country_flag = decision_origins_syncretic_evolution
		

		capital_scope = {

			if = {
				limit = { owner = { has_civic = civic_machine_assimilator } }
				# make them cybernetic
				create_species = {
					name = random
					class = random
					namelist = random
					portrait = random
					homeworld = planet
					traits = {
						trait = trait_syncretic_proles
						trait = trait_cybernetic
					}
				}
			}
			else_if = {
				limit = { owner = { is_hive_empire = yes } }
				# make them hive
				create_species = {
					name = random
					class = random
					namelist = random
					portrait = random
					homeworld = planet
					traits = {
						trait = trait_syncretic_proles
						trait = trait_hive_mind
					}
				}
			}
			else = {
				# make them normal
				create_species = {
					name = random
					class = random
					namelist = random
					portrait = random
					homeworld = planet
					traits = {
						trait = trait_syncretic_proles
					}
				}
			}


			create_pop_group = {
				size = 1200
				species = last_created_species
			}
			
			# if hive
			if = {
				limit = { owner = { is_hive_empire = yes } }
				last_created_species = {
					set_citizenship_type = {
						country = root.owner
						type = citizenship_full
					}
					# modify_species = {
					# 	species = this
					# 	ideal_planet_class = home_planet
					# }
				}
			}
			# if assimilator
			else_if = {
				limit = { owner = { has_civic = civic_machine_assimilator } }

				last_created_species = {
					set_citizenship_type = {
						country = root.owner
						type = citizenship_full_machine
					}
					# modify_species = {
					# 	species = this
					# 	ideal_planet_class = home_planet
					# }
				}

			}
			# otherwise
			else = {
				last_created_species = {
					# try to force slavery
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
					# modify_species = {
					# 	species = this
					# 	ideal_planet_class = home_planet
					# }
				}
			}
		}
	}

}